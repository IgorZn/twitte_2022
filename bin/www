#!/usr/bin/env node

/**
 * Module dependencies.
 */
const os = require("os");
let app = require('../app');
let debug = require('debug')('twitter-2022:server');
let http = require('http');
const {Server} = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Enable socket.io
 * */

const io = new Server(server, {pingTimeout: 60000})

io.on('connection', client => {

    // console.log('arguments>>>', arguments)
    // console.log(`a user connected ${client.toString()}`)

    client.on('setup', user => {
        console.log(`${user.firstName} ${user.lastName} -- just connected`)
        /**
         *  Комната (room) — это произвольный канал, к которому могут присоединяться (join) и выходить (leave) сокеты.
         *  Его можно использовать для трансляции событий подмножеству клиентов.
         *  https://socket.io/docs/v4/rooms/
         *
         * */
        client.join(user._id) // name of room
        client.emit("client_connected") // send message to client "connected"
    })

    /**
     *  мы получаем chatId по событию "join room" из
     *  '$(document).ready(() => { socket.emit("join room", chatId) ...}',
     *  берем этот Id и создаем комнату с ним (Id): roomId => socket.join(roomId)
     * */
    client.on("join room", roomId => socket.join(roomId))

    client.on('event', () => {});
    client.on('disconnect', () => {});
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    console.log()
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug(`Listening on` + bind);
    console.log(`Listening on http://${os.hostname()}:` + port)
}
